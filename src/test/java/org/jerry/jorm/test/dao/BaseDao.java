package org.jerry.jorm.test.dao;import org.jerry.jorm.BasicDaoImpl;import org.jerry.jorm.Filter;import org.jerry.jorm.descriptor.EntityPropertyDescriptor;import org.jerry.jorm.test.entiry.BaseEntity;import org.jerry.jorm.test.util.MySecurityUtils;import java.io.Serializable;import java.lang.reflect.InvocationTargetException;import java.util.Date;import java.util.Map;/** * Created by Jerry.Yong on 2014/10/11. */public abstract class BaseDao<T, ID extends Serializable> extends BasicDaoImpl<T, ID> {    @Override    public void save(T t) {        try {            EntityPropertyDescriptor idDescriptor = entityDescriptor.getIdDescriptor();            Object idValue = idDescriptor.getReadMethod().invoke(t);            if (idValue == null) {                idDescriptor.getWriteMethod().invoke(t, MySecurityUtils.getUUID());            }            if (BaseEntity.class.isAssignableFrom(entityClass)) {                ((BaseEntity) t).setCreateTime(new Date());                ((BaseEntity) t).setUpdateTime(new Date());            }            super.save(t);        } catch (IllegalAccessException e) {            e.printStackTrace();        } catch (InvocationTargetException e) {            e.printStackTrace();        }    }    @Override    public void update(T t, boolean ignoreNull) {        if (BaseEntity.class.isAssignableFrom(entityClass)) {            ((BaseEntity) t).setUpdateTime(new Date());        }        super.update(t, ignoreNull);    }    @Override    public void update(Map<String, Object> updateProperties, Filter... filters) {        if (BaseEntity.class.isAssignableFrom(entityClass)) {            updateProperties.put("updateTime", new Date());        }        super.update(updateProperties, filters);    }}